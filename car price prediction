# Import required libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn import metrics

# Load the data
car_data = pd.read_csv('car data.csv')

# Explore the data
print(car_data.head())
print(car_data.info())
print(car_data.isnull().sum())
print(car_data.describe())
print(car_data.columns)

# Analyze categorical columns
print(car_data['Fuel_Type'].value_counts())
print(car_data['Seller_Type'].value_counts())
print(car_data['Transmission'].value_counts())

# Visualizing categorical data columns
fuel_type = car_data['Fuel_Type']
seller_type = car_data['Seller_Type']
transmission_type = car_data['Transmission']
selling_price = car_data['Selling_Price']

plt.style.use('ggplot')
fig = plt.figure(figsize=(15, 5))
fig.suptitle('Visualizing categorical data columns')
plt.subplot(1, 3, 1)
plt.bar(fuel_type, selling_price, color='royalblue')
plt.xlabel("Fuel Type")
plt.ylabel("Selling Price")

plt.subplot(1, 3, 2)
plt.bar(seller_type, selling_price, color='red')
plt.xlabel("Seller Type")

plt.subplot(1, 3, 3)
plt.bar(transmission_type, selling_price, color='purple')
plt.xlabel('Transmission type')

plt.tight_layout()
plt.show()

# Using seaborn for better visuals
fig, axes = plt.subplots(1, 3, figsize=(15, 5), sharey=True)
fig.suptitle('Visualizing categorical columns')
sns.barplot(x=fuel_type, y=selling_price, ax=axes[0])
sns.barplot(x=seller_type, y=selling_price, ax=axes[1])
sns.barplot(x=transmission_type, y=selling_price, ax=axes[2])

plt.tight_layout()
plt.show()

# Descriptive statistics for specific groups
petrol_data = car_data.groupby('Fuel_Type').get_group('Petrol')
print(petrol_data.describe())

seller_data = car_data.groupby('Seller_Type').get_group('Dealer')
print(seller_data.describe())

# Manual encoding for 'Fuel_Type'
car_data.replace({'Fuel_Type': {'Petrol': 0, 'Diesel': 1, 'CNG': 2}}, inplace=True)

# One-hot encoding for categorical variables
car_data = pd.get_dummies(car_data, columns=['Seller_Type', 'Transmission'], drop_first=True)

# Correlation heatmap
plt.figure(figsize=(10, 7))
sns.heatmap(car_data.corr(), annot=True)
plt.title('Correlation between the columns')
plt.show()

# Relationship between Present Price and Selling Price
fig = plt.figure(figsize=(7, 5))
plt.title('Correlation between Present Price and Selling Price')
sns.regplot(x='Present_Price', y='Selling_Price', data=car_data)

# Splitting the data
X = car_data.drop(['Car_Name', 'Selling_Price'], axis=1)
y = car_data['Selling_Price']

print("Shape of X is: ", X.shape)
print("Shape of y is: ", y.shape)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

print("X_test shape:", X_test.shape)
print("X_train shape:", X_train.shape)
print("y_test shape: ", y_test.shape)
print("y_train shape:", y_train.shape)

# Scaling features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
pred = model.predict(X_test)

# Evaluation metrics
print("MAE: ", metrics.mean_absolute_error(pred, y_test))
print("MSE: ", metrics.mean_squared_error(pred, y_test))
print("R2 score: ", metrics.r2_score(pred, y_test))

# Plot Actual vs Predicted prices
sns.regplot(x=pred, y=y_test)
plt.xlabel("Predicted Price")
plt.ylabel('Actual Price')
plt.title("Actual vs Predicted Price")
plt.show()
